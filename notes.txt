Events inconsistent - in some places you get the data you need (itemLink e.g. from Api call)
but in others you have to parse out a string manually (eg. CHAT_MSG_LOOT). Need to tie info
across multiple domains/topics (e.g. chat, merchant, cash ...)

Stringing workflow across events -- see ITEM_LOCKED, DESTROY_ITEM_CONFIRM and BAG_UPDATE requires some
state management ... inevitably bug-prone if the player can do multiple things at the same
time.

No debugging environment, no compiletime checks or real intellisense. Patchy crowdsourced
documentation and /etrace.

Lua. In Lua you have to define local functions before using them. OMG. Old school. Otherwise
its print("got here") debugging all the way, but these help:

/console scriptErrors 1 to display LUA errors
/console scriptErrors 0 to hide LUA errors

!buggrabber and bugsack (former can be embedded into your own addon)
advancedinterfaceoptions addon can show, hide errors apparently
https://www.reddit.com/r/WowUI/comments/2lpmff/help_what_debugging_tools_are_available_to/

extended workflows expressed in mutiple events:

destruction:
ITEM_LOCKED > [ITEM_UNLOCKED] > DESTROY_ITEM_CONFIRM > [ITEM_LOCKED] > [ITEM_UNLOCKED] > BAG_UPDATE


self! There's an interesting thing. It's available as a global -- if you're in a method prefixed
with Holdings:XXX, in whcih case it's passed in as a hidden/implicit parameter. Otherwise, it needs
be explicitly added as a method param (assuming with a call chain rooted in something prefixed with
Holdings:XXX ...): https://stackoverflow.com/a/45114635/389828



Security issues around realtime actions. Writing and reading to files from lua within WoW is locked
out (lua 5+ enables lockout? get reference). Only write is to saved variables directory, access variables
acedb or raw? Internal chatlogging doesn't flush until logout (https://www.wowinterface.com/forums/showthread.php?t=624)
This is another fundamental problem, on top of the events not quite being keyed to chains of actions;
actually that's not strictly fair, as the events are meant to be one-shots to enable UI lookup, they'reading
not designed to be used to infer player actions post-hoc. (Could rebuild entire interface from ground up
just to support accounting-style activities, and get access to player intent at source ...)